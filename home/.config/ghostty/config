# To get the default values
# ghostty +show-config --default --docs > ~/github/dotfiles-latest/ghostty/config-default

# To see a list of available themes, run `ghostty +list-themes`.
# theme = zenwritten_dark
# theme = Everforest Dark - Hard
# theme = GruvboxDark
theme = Gruvbox Material
# theme = gruvbox-material-soft-dark
# theme = GruvboxDarkHard

# This fixes the gruvbox-material
selection-invert-fg-bg = true
# ghost text color
# palette = 8=#44403d
# palette = 8=#928374

cursor-color = #d3869b
palette = 0=#141617
palette = 1=#ea6962
palette = 2=#a9b665
palette = 3=#d8a657
palette = 4=#7daea3
palette = 5=#d3869b
palette = 6=#89b482
palette = 7=#ddc7a1
palette = 8=#666666
palette = 9=#ea6962
palette = 10=#a9b665
palette = 11=#d8a657
palette = 12=#7daea3
palette = 13=#d3869b
palette = 14=#89b482
palette = 15=#ddc7a1
background = #282828
cursor-text = #141617
selection-foreground = #333e34


# Some shaders can be found in this repo, they're usually uploaded to discord
# https://github.com/hackrmomo/ghostty-shaders
# custom-shader = shaders/animated-gradient-shader.glsl
# custom-shader = shaders/bettercrt.glsl
# custom-shader = shaders/bloom.glsl
# custom-shader = shaders/bloom1.glsl
# custom-shader = shaders/bloom075.glsl
# custom-shader = shaders/bloom060.glsl
# custom-shader = shaders/bloom050.glsl
custom-shader = shaders/bloom025.glsl
# custom-shader = shaders/bloom050.glsl
# custom-shader = shaders/bloom060.glsl
# custom-shader = shaders/bloom075.glsl
# custom-shader = shaders/bloom1.glsl
# custom-shader = shaders/crt.glsl
# custom-shader = shaders/cubes.glsl
# custom-shader = shaders/dither.glsl
# custom-shader = shaders/drunkard.glsl
# custom-shader = shaders/fireworks-rockets.glsl
# custom-shader = shaders/fireworks.glsl
# custom-shader = shaders/gears-and-belts.glsl
# custom-shader = shaders/glitchy.glsl
# custom-shader = shaders/glow-rgbsplit-twitchy.glsl
# custom-shader = shaders/gradient-background.glsl
# custom-shader = shaders/inside-the-matrix.glsl
# custom-shader = shaders/just-snow.glsl
# custom-shader = shaders/matrix-hallway.glsl
# custom-shader = shaders/negative.glsl
# custom-shader = shaders/retro-terminal.glsl
# custom-shader = shaders/smoke-and-ghost.glsl
# custom-shader = shaders/sparks-from-fire.glsl
# custom-shader = shaders/spotlight.glsl
# custom-shader = shaders/starfield-colors.glsl
# custom-shader = shaders/starfield.glsl
# custom-shader = shaders/tft.glsl
# custom-shader = shaders/underwater.glsl
# custom-shader = shaders/water.glsl
# custom-shader = shaders/cursor_blaze.glsl
custom-shader = shaders/cursor_blaze_no_trail.glsl
custom-shader = shaders/cursor_smear.glsl
# custom-shader = shaders/cursor_smear_fade.glsl

# The command to run, usually a shell. If this is not an absolute path, it'll
# be looked up in the `PATH`. If this is not set, a default will be looked up
# from your system. The rules for the default lookup are:
#
#   * `SHELL` environment variable
#
#   * `passwd` entry (user information)
#
# This can contain additional arguments to run the command with. If additional
# arguments are provided, the command will be executed using `/bin/sh -c`.
# Ghostty does not do any shell command parsing.
#
# If you're using the `ghostty` CLI there is also a shortcut to run a command
# with arguments directly: you can use the `-e` flag. For example: `ghostty -e
# fish --with --custom --args`. The `-e` flag automatically forces some
# other behaviors as well:
#
#   * `gtk-single-instance=false` - This ensures that a new instance is
#     launched and the CLI args are respected.
#
#   * `quit-after-last-window-closed=true` - This ensures that the Ghostty
#     process will exit when the command exits. Additionally, the
#     `quit-after-last-window-closed-delay` is unset.
# ############################################################################
# The following command checks if tmux is installed.
# If tmux is installed, it automatically attaches to an existing tmux session.
# If no tmux session exists, a new one is created.
# If tmux is not installed, it simply starts zsh without tmux.
#
# For this to work properly, you need to make sure that your shell is configured
# for homebrew, so you should have this line:
# eval "$(/opt/homebrew/bin/brew shellenv)"
# In your ~/.zprofile file
# If you don't have that line, or if the file doesn't exist, run this:
# echo '' >>~/.zprofile && echo '# Configure shell for brew' >>~/.zprofile && echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >>~/.zprofile && eval "$(/opt/homebrew/bin/brew shellenv)"
#
# This assumes you installed tmux through brew if using macos
# command = zsh --login -c "if command -v tmux >/dev/null 2>&1; then tmux attach || tmux; else zsh; fi"
window-padding-balance = false
window-padding-x = 9,6
window-padding-y = 12,0

window-height = 40
window-width = 150

background-opacity = .95
background-blur-radius = 5

font-family = "JetBrainsMono Nerd Font"
# font-family = "MesloLGS Nerd Font Mono"
font-size = 20

# Valid values:
#
#   * `true`
#   * `false` - windows won't have native decorations, i.e. titlebar and
#      borders. On macOS this also disables tabs and tab overview.
#
# The "toggle_window_decoration" keybind action can be used to create
# a keybinding to toggle this setting at runtime.
#
# Changing this configuration in your configuration and reloading will
# only affect new windows. Existing windows will not be affected.
#
# macOS: To hide the titlebar without removing the native window borders
#        or rounded corners, use `macos-titlebar-style = hidden` instead.
macos-titlebar-style = hidden

# Confirms that a surface should be closed before closing it. This defaults to
# true. If set to false, surfaces will close without any confirmation.
confirm-close-surface = false

# See the various configurations for the quick terminal in the
# configuration file to customize its behavior.
#
# `global:` - Make the keybind global. By default, keybinds only work
#  within Ghostty and under the right conditions (application focused,
#  sometimes terminal focused, etc.). If you want a keybind to work
#  globally across your system (i.e. even when Ghostty is not focused),
#  specify this prefix. This prefix implies `all:`. Note: this does not
#  work in all environments; see the additional notes below for more
#  information.
# keybind = global:cmd+s=toggle_quick_terminal
keybind = cmd+s=toggle_quick_terminal

# Valid values are:
#
#   * `top` - Terminal appears at the top of the screen.
#   * `bottom` - Terminal appears at the bottom of the screen.
#   * `left` - Terminal appears at the left of the screen.
#   * `right` - Terminal appears at the right of the screen.
#   * `center` - Terminal appears at the center of the screen.
#
# Changing this configuration requires restarting Ghostty completely.
quick-terminal-position = bottom

# If `true`, the *Option* key will be treated as *Alt*. This makes terminal
# sequences expecting *Alt* to work properly, but will break Unicode input
# sequences on macOS if you use them via the *Alt* key. You may set this to
# `false` to restore the macOS *Alt* key unicode sequences but this will break
# terminal sequences expecting *Alt* to work.
#
# The values `left` or `right` enable this for the left or right *Option*
# key, respectively.
#
# Note that if an *Option*-sequence doesn't produce a printable character, it
# will be treated as *Alt* regardless of this setting. (i.e. `alt+ctrl+a`).
#
# This does not work with GLFW builds.
macos-option-as-alt = true

# Duration (in seconds) of the quick terminal enter and exit animation.
# Set it to 0 to disable animation completely. This can be changed at
# runtime.
# quick-terminal-animation-duration = 0.1
quick-terminal-animation-duration = 0.08

# This doesn't work when in tmux, if outside tmux the regular ctrl+l works
# keybind = super+k=clear_screen

# ssh for remote linux run infocmp -x | ssh YOUR-SERVER -- /usr/bin/tic -x -

# required for the term info thing
shell-integration-features = sudo

# If true, Ghostty on macOS will automatically enable the "Secure Input" feature when it detects that a password prompt is being displayed.
macos-auto-secure-input = true
