# ============================================================================ #
# ===                               PLUGINS                                === #
# ============================================================================ #

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'jaclu/tmux-menus'
set -g @plugin 'tmux-plugins/tmux-resurrect' # persist tmux sessions after computer restart
set -g @plugin 'tmux-plugins/tmux-continuum' # automatically saves sessions for you every 15 minutes
set -g @plugin 'tmux-plugins/tmux-yank'

# ============================================================================ #
# ===                               GENERAL                                === #
# ============================================================================ #
# I was getting this warning in neovim
# Neither Tc nor RGB capability set. True colors are disabled
# Confirm your $TERM value outside of tmux first, mine returned "screen-256color"
# echo $TERM
# set-option -sa terminal-features ',xterm-256color:RGB'
# set -sg terminal-overrides ",*:RGB"

# Undercurl support (works with kitty)
# Fix found below in Folke's tokyonight theme :heart:
# https://github.com/folke/tokyonight.nvim#fix-undercurls-in-tmux
#
# After reloading the configuration, you also have to kill the tmux session for
# these changes to take effect
# set -g default-terminal "screen-256color"
# set -g default-terminal "${TERM}"
set -g default-terminal "xterm-ghostty"

set -g default-command $SHELL

# undercurl support
# set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# # underscore colours - needs tmux-3.0
# set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
# # to fix cursor shape problem with neovim
# set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'

# https://github.com/3rd/image.nvim/?tab=readme-ov-file#tmux
# This is needed by the image.nvim plugin
set -gq allow-passthrough on
# This is related to the `tmux_show_only_in_active_window = true,` config in
# image.nvim
set -g visual-activity off

# Alternate session
# Switch between the last 2 tmux sessions, similar to 'cd -' in the terminal
# I use this in combination with the `choose-tree` to sort sessions by time
# Otherwise, by default, sessions are sorted by name, and that makes no sense
# -l stands for `last session`, see `man tmux`
unbind Space
bind-key Space switch-client -l

# Border lines between panes are thicker
# single -> single lines using ACS or UTF-8 characters
# double -> double lines using UTF-8 characters
# heavy  -> heavy lines using UTF-8 characters
# simple -> simple ASCII characters
# number -> the pane number
set -g pane-border-lines single

# Indicate active pane by colouring only half of the border in windows with
# exactly two panes, by displaying arrow markers, by drawing both or neither.
# [off | colour | arrows | both]
set -g pane-border-indicators colour

 # When pressing prefix+s to list sessions, I want them sorted by time
# That way my latest used sessions show at the top of the list
# -s starts with sessions collapsed (doesn't show windows)
# -Z zooms the pane (don't uderstand what this does)
# -O specifies the initial sort field: one of ‚Äòindex‚Äô, ‚Äòname‚Äô, or ‚Äòtime‚Äô (activity).
# https://unix.stackexchange.com/questions/608268/how-can-i-force-tmux-to-sort-my-sessions-alphabetically
#
# bind s choose-tree -Zs -O time
# bind s choose-tree -Zs -O time -y
bind l choose-tree -Zs -O time -F "#{session_windows}"

# Change Menu
set -g @menus_trigger z

# Start windows numbering at 1.
set -g base-index 1

# Start pane numbering at 1.
setw -g pane-base-index 1

# Re-draw status window seconds.
set -g status-interval 3

# Set scrollback history (100k).
set -g history-limit 100000

# Shorten command delay.
set -sg escape-time 0

# Automatic tab rename to current dir
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

# # Set host name ass status bar
# set -g status-right '#[fg=blue]#(hostname)'
# # set -g status-right "#H"

# Notify applications (nvim) of focus changes
set-option -g focus-events on

# renumber windows when a window is closed
set-option -g renumber-windows on

# allow to use OSC52 to copy from ssh
# https://github.com/tmux/tmux/wiki/Clipboard
set -s set-clipboard on

# Set Ctrl-a as the default prefix key combination and unbind C-b to free it up.
set -g prefix C-a
unbind C-b

# Use send-prefix to pass C-a through to application.
bind C-a send-prefix

# Reload ~/.tmux.conf using PREFIX r.
bind r source-file ~/.config/tmux/tmux.conf

# Create window with current path.
bind c new-window -c "#{pane_current_path}"

# Bind <prefix>- to split window horizontally.
bind s split-window -v -c "#{pane_current_path}"
unbind %

# Bind <prefix>| to split window vertically.
bind v split-window -h -c "#{pane_current_path}"
unbind '"'

# Kill pane without confirmation.
bind x kill-pane

# Remove delay after escape.
set -sg escape-time 0

set-window-option -g mode-keys vi

# Copy mode
bind e copy-mode
bind-key -T copy-mode-vi v send -X begin-selection # start selecting text with "v"
bind-key -T copy-mode-vi x send -X clear-selection
bind-key -T copy-mode-vi Escape send-keys -X cancel
bind-key -T copy-mode-vi _ send-keys -X start-of-line\; send-keys -X search-backward "^U[;']w[;']) { "
set -g @yank_with_mouse off
unbind -T copy-mode-vi MouseDragEnd1Pane # don't exit copy mode when dragging with mouse
unbind -T copy-mode MouseDragEnd1Pane

# Set sesh
bind-key "w" run-shell "sesh connect \"$(
  sesh list --icons | fzf-tmux -p 55%,60% \
    --no-sort --ansi --border-label ' sesh ' --prompt '‚ö°  ' \
    --header '  ^a all ^t tmux ^g configs ^x zoxide ^d tmux kill ^f find' \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-a:change-prompt(‚ö°  )+reload(sesh list --icons)' \
    --bind 'ctrl-t:change-prompt(ü™ü  )+reload(sesh list -t --icons)' \
    --bind 'ctrl-g:change-prompt(‚öôÔ∏è  )+reload(sesh list -c --icons)' \
    --bind 'ctrl-x:change-prompt(üìÅ  )+reload(sesh list -z --icons)' \
    --bind 'ctrl-f:change-prompt(üîé  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
    --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(‚ö°  )+reload(sesh list --icons)' \
)\""

# Recommended by sesh
bind-key x kill-pane # skip "kill-pane 1? (y/n)" prompt
set -g detach-on-destroy off  # don't exit from tmux when closing a session

# smart split
# Smart pane switching with awareness of Neovim splits.
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'
bind-key -n C-, if -F "#{@pane-is-vim}" 'send-keys C-,'  'select-pane -R'

# Smart pane resizing with awareness of Neovim splits.
bind-key -n C-left if -F "#{@pane-is-vim}" 'send-keys C-left' 'resize-pane -L 5'
bind-key -n C-down if -F "#{@pane-is-vim}" 'send-keys C-down' 'resize-pane -D 5'
bind-key -n C-up if -F "#{@pane-is-vim}" 'send-keys C-up' 'resize-pane -U 5'
bind-key -n C-right if -F "#{@pane-is-vim}" 'send-keys C-right' 'resize-pane -R 5'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-,' select-pane -l

bind H swap-pane -d -t "{left-of}"
bind J swap-pane -d -t "{down-of}"
bind K swap-pane -d -t "{up-of}"
bind L swap-pane -d -t "{right-of}"

bind -r m resize-pane -Z

set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '5'

# Visual notification of activity in other windows.
setw -g monitor-activity off

# Move windows to left or right
bind P swap-window -t -1
bind N swap-window -t +1

# enable mouse support
set -g mouse on

source-file $XDG_CONFIG_HOME/tmux/tmux-set-theme.conf

# tpm
set-environment -g TMUX_PLUGIN_MANAGER_PATH $XDG_DATA_HOME/tmux/plugins

if "test ! -d $XDG_DATA_HOME/tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm $XDG_DATA_HOME/tmux/plugins/tpm && $XDG_DATA_HOME/tmux/plugins/tpm/bin/install_plugins'"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf).
run -b "$XDG_DATA_HOME/tmux/plugins/tpm/tpm"
