
set number relativenumber
set idearefactormode=keep
set ideajoin
set incsearch
set surround
set visualbell
set ideamarks
set commentary

set ignorecase
set history=2000
set which-key
set timeoutlen=5000
set hls
set NERDTree
set showmode
set clipboard+=unnamed

let mapleader = " "
nmap <Space> <Nop>

" Window navigation keymaps
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

nmap <C-w>K <action>(StretchSplitToTop)
nmap <C-w>J <action>(StretchSplitToBottom)
nmap <C-w>H <action>(StretchSplitToLeft)
nmap <C-w>L <action>(StretchSplitToRight)

nmap <C-z> <action> (ToggleDistractionFreeMode)
" system clipboard
xmap <leader>p "_dP

nmap <leader>d "_d
vmap <leader>d "_d

" next greatest remap ever
nmap y "+y
nmap Y "+Y

imap <C-c> <Esc>


nmap <leader>s :%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>

 " { desc = "When highlighted move the line down" })
vmap J :m >+1<CR>gv=gv
" { desc = "When highlighted move the line up" })
vmap K :m <-2<CR>gv=gv
" { desc = "Paste below line at the end of the line without moving cursor " })
nmap J mzJ`z
 "{ desc = "C-d keep cursor in middle" })
nmap <C-d> <C-d>zz
"{ desc = "C-u keep cursor in middle" })
nmap <C-u> <C-u>zz
"{ desc = "search keep cursor in middle" })
nmap n nzzzv
"{ desc = "search keep cursor in middle" })
nmap N Nzzzv

vmap < <gv
vmap > >gv

nmap <leader>t      <action>(ActivateTerminalToolWindow)

nmap <leader>pv :NERDTree<CR>

let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpParent='h'


nmap <leader><space> <action>(RecentFiles)
"  { desc = '[S]earch  in [C]urrent buffer' })
nmap <leader>sc <action>(Find)
{ desc = '[S]earch [F]iles' })
nmap <leader>sf <action>(GoToFile)
nmap <leader>sg <action>(SearchEverywhere)

nmap <leader>r <action>(Refactorings.QuickListPopupAction)
""""""


nmap <leader>rn :action RenameElement<CR>

nmap gi <action>(GotoImplementation)

nmap gs :action FileStructurePopup<CR>

nmap gd :action GotoDeclaration<CR>
map <C-o> <Action>(Back)
map <C-i> <Action>(Forward)
nmap ga :action GotoAction<CR>
vmap ga :action GotoAction<CR>
nmap gr <action>(FindUsages)

nmap <leader>f <action>(ReformatCode)
vmap <leader>f <action>(ReformatCode)

vmap gc :action CommentByLineComment<CR>

nmap <leader>ca <action>(ShowIntentionActions)

nmap [d <action>(GotoNextError)
nmap ]d <Action>(GotoPreviousError)

nmap <leader>G <action>(GotoLine)
nmap <leader>rr <action>(IdeaVim.ReloadVimRc.reload)

